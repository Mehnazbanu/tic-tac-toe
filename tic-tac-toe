import math
X = '1'
O = 'O'
EMPTY = 'E'
class Board:
    def __init__(self):
        self.board = [EMPTY] * 9

    def display(self):
        for i in range(0, 9, 3):
            print(self.board[i], '|', self.board[i + 1], '|', self.board[i + 2])
            if i < 6:
                print('---------')

    def available_moves(self):
        return [i for i, mark in enumerate(self.board) if mark == EMPTY]

    def make_move(self, move, player):
        self.board[move] = player

    def check_winner(self, player):
        winning_combinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
            
        ]
        for combo in winning_combinations:
            if all(self.board[i] == player for i in combo):
                return True
        return False

    def is_full(self):
        return all(mark != EMPTY for mark in self.board)

def minimax(board, depth, maximizing_player):
    if board.check_winner(X):
        return -1
    if board.check_winner(O):
        return 1
    if board.is_full():
        return 0

    if maximizing_player:
        max_eval = -math.inf
        for move in board.available_moves():
            board.make_move(move, O)
            eval = minimax(board, depth + 1, False)
            board.make_move(move, EMPTY)
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for move in board.available_moves():
            board.make_move(move, X)
            eval = minimax(board, depth + 1, True)
            board.make_move(move, EMPTY)
            min_eval = min(min_eval, eval)
        return min_eval

def best_move(board):
    best_score = -math.inf
    best_move = None
    for move in board.available_moves():
        board.make_move(move, O)
        score = minimax(board, 0, False)
        board.make_move(move, EMPTY)
        if score > best_score:
            best_score = score
            best_move = move
    return best_move

def play_game():
    board = Board()
    player = X
    while True:
        board.display()
        if player == X:
            move = int(input("Enter your move (0-8): "))
            if move not in board.available_moves():
                print("Invalid move. Try again.")
                continue
        else:
            move = best_move(board)
            print(f"AI chooses move {move}")
        board.make_move(move, player)
        if board.check_winner(player):
            board.display()
            print(f"{player} wins!")
            break
        elif board.is_full():
            board.display()
            print("It's a draw!")
            break
        player = O if player == X else X

if __name__ == "__main__":
    play_game()




